import os
import numpy as np
import glob
from sklearn import cluster


def get_mask_path():
    return os.getcwd() + "/../IXI-masks"

def get_filtered_mask_path():
    return os.getcwd() + "/../IXI-filtered-masks"


def get_all_masks():
    path = get_mask_path()
    files = glob.glob(f'{path}/*.npy')
    return files


def slice_mask_get_main_cluster(mask_slice):
    # transform to x,y coordinates:
    tmask = []
    for i in range(0, 255):
        for j in range(0, 255):
            if mask_slice[i, j]:
                tmask.append([i, j])

    tmask = np.array(tmask)

    if np.shape(tmask)[0] == 0:
        return np.zeros((256, 256))

    # dbscan clustering:
    eps = 10
    min_samples = 1
    dbscanModel = cluster.DBSCAN(eps=eps, min_samples=min_samples)
    ygrup = dbscanModel.fit(tmask)
    labels = ygrup.labels_

    # get the main cluster (the one with more pixels)
    unique, counts = np.unique(labels, return_counts=True)
    selected_label = unique[np.argmax(counts)]

    # Get the filtered final mask
    n = 0
    for i in range(0, 255):
        for j in range(0, 255):
            if mask_slice[i, j]:
                mask_slice[i, j] = labels[n] == selected_label
                n += 1

    return mask_slice


def cluster_mask(file):
    mask = np.load(file)

    # We have the mask generated by deepbrain, but we want to get rid of some false positives
    slices = []
    z_shape = np.shape(mask)[2]
    for i in range(0, z_shape):
        mask_slice = np.squeeze(mask[:, :, i:i + 1])
        slice = slice_mask_get_main_cluster(mask_slice)
        slices.append(slice)

    volume = np.array(slices)
    volume = volume.reshape((z_shape, 256, 256))
    volume = np.transpose(volume, axes=[1, 2, 0])

    # save the filtered new mask
    np.save(f'{get_filtered_mask_path()}/{os.path.basename(file)}', volume)


def cluster_masks():
    files = get_all_masks()
    for f in files:
        cluster_mask(f)
        

# This is a regular python script for testing deepbrain masks applied to NIFTI MRIs
if __name__ == '__main__':
    cluster_masks()
    # cluster_mask()




